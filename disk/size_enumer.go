// Code generated by "enumer -type=Size -trimprefix=Size"; DO NOT EDIT.

package disk

import (
	"fmt"
	"strings"
)

const _SizeName = "10GB20GB30GB40GB50GB60GB80GB100GB150GB200GB250GB300GB350GB400GB450GB500GB600GB700GB800GB900GB1TB2TB3TB4TB"

var _SizeIndex = [...]uint8{0, 4, 8, 12, 16, 20, 24, 28, 33, 38, 43, 48, 53, 58, 63, 68, 73, 78, 83, 88, 93, 96, 99, 102, 105}

const _SizeLowerName = "10gb20gb30gb40gb50gb60gb80gb100gb150gb200gb250gb300gb350gb400gb450gb500gb600gb700gb800gb900gb1tb2tb3tb4tb"

func (i Size) String() string {
	if i < 0 || i >= Size(len(_SizeIndex)-1) {
		return fmt.Sprintf("Size(%d)", i)
	}
	return _SizeName[_SizeIndex[i]:_SizeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SizeNoOp() {
	var x [1]struct{}
	_ = x[Size10GB-(0)]
	_ = x[Size20GB-(1)]
	_ = x[Size30GB-(2)]
	_ = x[Size40GB-(3)]
	_ = x[Size50GB-(4)]
	_ = x[Size60GB-(5)]
	_ = x[Size80GB-(6)]
	_ = x[Size100GB-(7)]
	_ = x[Size150GB-(8)]
	_ = x[Size200GB-(9)]
	_ = x[Size250GB-(10)]
	_ = x[Size300GB-(11)]
	_ = x[Size350GB-(12)]
	_ = x[Size400GB-(13)]
	_ = x[Size450GB-(14)]
	_ = x[Size500GB-(15)]
	_ = x[Size600GB-(16)]
	_ = x[Size700GB-(17)]
	_ = x[Size800GB-(18)]
	_ = x[Size900GB-(19)]
	_ = x[Size1TB-(20)]
	_ = x[Size2TB-(21)]
	_ = x[Size3TB-(22)]
	_ = x[Size4TB-(23)]
}

var _SizeValues = []Size{Size10GB, Size20GB, Size30GB, Size40GB, Size50GB, Size60GB, Size80GB, Size100GB, Size150GB, Size200GB, Size250GB, Size300GB, Size350GB, Size400GB, Size450GB, Size500GB, Size600GB, Size700GB, Size800GB, Size900GB, Size1TB, Size2TB, Size3TB, Size4TB}

var _SizeNameToValueMap = map[string]Size{
	_SizeName[0:4]:          Size10GB,
	_SizeLowerName[0:4]:     Size10GB,
	_SizeName[4:8]:          Size20GB,
	_SizeLowerName[4:8]:     Size20GB,
	_SizeName[8:12]:         Size30GB,
	_SizeLowerName[8:12]:    Size30GB,
	_SizeName[12:16]:        Size40GB,
	_SizeLowerName[12:16]:   Size40GB,
	_SizeName[16:20]:        Size50GB,
	_SizeLowerName[16:20]:   Size50GB,
	_SizeName[20:24]:        Size60GB,
	_SizeLowerName[20:24]:   Size60GB,
	_SizeName[24:28]:        Size80GB,
	_SizeLowerName[24:28]:   Size80GB,
	_SizeName[28:33]:        Size100GB,
	_SizeLowerName[28:33]:   Size100GB,
	_SizeName[33:38]:        Size150GB,
	_SizeLowerName[33:38]:   Size150GB,
	_SizeName[38:43]:        Size200GB,
	_SizeLowerName[38:43]:   Size200GB,
	_SizeName[43:48]:        Size250GB,
	_SizeLowerName[43:48]:   Size250GB,
	_SizeName[48:53]:        Size300GB,
	_SizeLowerName[48:53]:   Size300GB,
	_SizeName[53:58]:        Size350GB,
	_SizeLowerName[53:58]:   Size350GB,
	_SizeName[58:63]:        Size400GB,
	_SizeLowerName[58:63]:   Size400GB,
	_SizeName[63:68]:        Size450GB,
	_SizeLowerName[63:68]:   Size450GB,
	_SizeName[68:73]:        Size500GB,
	_SizeLowerName[68:73]:   Size500GB,
	_SizeName[73:78]:        Size600GB,
	_SizeLowerName[73:78]:   Size600GB,
	_SizeName[78:83]:        Size700GB,
	_SizeLowerName[78:83]:   Size700GB,
	_SizeName[83:88]:        Size800GB,
	_SizeLowerName[83:88]:   Size800GB,
	_SizeName[88:93]:        Size900GB,
	_SizeLowerName[88:93]:   Size900GB,
	_SizeName[93:96]:        Size1TB,
	_SizeLowerName[93:96]:   Size1TB,
	_SizeName[96:99]:        Size2TB,
	_SizeLowerName[96:99]:   Size2TB,
	_SizeName[99:102]:       Size3TB,
	_SizeLowerName[99:102]:  Size3TB,
	_SizeName[102:105]:      Size4TB,
	_SizeLowerName[102:105]: Size4TB,
}

var _SizeNames = []string{
	_SizeName[0:4],
	_SizeName[4:8],
	_SizeName[8:12],
	_SizeName[12:16],
	_SizeName[16:20],
	_SizeName[20:24],
	_SizeName[24:28],
	_SizeName[28:33],
	_SizeName[33:38],
	_SizeName[38:43],
	_SizeName[43:48],
	_SizeName[48:53],
	_SizeName[53:58],
	_SizeName[58:63],
	_SizeName[63:68],
	_SizeName[68:73],
	_SizeName[73:78],
	_SizeName[78:83],
	_SizeName[83:88],
	_SizeName[88:93],
	_SizeName[93:96],
	_SizeName[96:99],
	_SizeName[99:102],
	_SizeName[102:105],
}

// SizeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SizeString(s string) (Size, error) {
	if val, ok := _SizeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _SizeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Size values", s)
}

// SizeValues returns all values of the enum
func SizeValues() []Size {
	return _SizeValues
}

// SizeStrings returns a slice of all String values of the enum
func SizeStrings() []string {
	strs := make([]string, len(_SizeNames))
	copy(strs, _SizeNames)
	return strs
}

// IsASize returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Size) IsASize() bool {
	for _, v := range _SizeValues {
		if i == v {
			return true
		}
	}
	return false
}
